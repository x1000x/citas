{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propíetario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citas","guardarCitas","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd442636.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    const [cita, actualizarCita] = useState({\r\n        mascota:'',\r\n        propíetario:'',\r\n        fecha:'',\r\n        hora:'', \r\n        sintomas:''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false)\r\n\r\n     const actualizarState = e =>{\r\n        actualizarCita({\r\n            ...cita, \r\n            [e.target.name] : e.target.value\r\n        })\r\n     }\r\nconst {mascota, propíetario, fecha, hora, sintomas} = cita\r\n\r\nconst submitCita= e =>{\r\n    e.preventDefault();\r\n\r\n    //validar \r\n    if(mascota.trim() === '' || propíetario.trim() === '' || fecha.trim() === '' ||hora.trim() === '' || sintomas.trim() === ''){\r\n       actualizarError(true);\r\n        return;\r\n    }\r\n    //eliminar el mensaje de error previo\r\n    actualizarError(false);\r\n\r\n    //asignar id\r\n    cita.id = uuidv4();\r\n\r\n\r\n    //crear la cita\r\n    crearCita(cita);\r\n\r\n    //reiniciar el formulario\r\n\r\n    actualizarCita({\r\n        mascota:'',\r\n        propíetario:'',\r\n        fecha:'',\r\n        hora:'', \r\n        sintomas:''\r\n    })\r\n\r\n\r\n}\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>crear cita</h2>\r\n\r\n            { error ? <p className=\"alerta-error \"> Todos los campos son obligatorios</p> :null}\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className =\"u-full-width\" \r\n                    placeholder=\"Nombre Mascota\"                     \r\n                    onChange={actualizarState}   \r\n                    value = {mascota}           \r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propíetario\"\r\n                    className =\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"                     \r\n                    onChange={actualizarState} \r\n                    value = {propíetario}               \r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className =\"u-full-width\"                     \r\n                    onChange={actualizarState} \r\n                    value = {fecha}                              \r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className =\"u-full-width\"                 \r\n                    onChange={actualizarState}  \r\n                    value = {hora}                              \r\n                />\r\n\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"                    \r\n                    onChange={actualizarState}  \r\n                    value = {sintomas} \r\n                > </textarea>\r\n\r\n                <button\r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\"\r\n                >\r\n                Agregar Cita\r\n                </button>\r\n            </form>\r\n\r\n        </Fragment>\r\n        \r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\n\r\nconst  Cita = ({cita, eliminarCita}) =>  ( \r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propíetario}</span></p>    \r\n        <p>Fecha: <span>{cita.fecha}</span></p>    \r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n        <button \r\n        className= \"button eliminar u-full-width\"\r\n         onClick={()=>eliminarCita (cita.id)}\r\n        >Eliminar\r\n         </button>            \r\n    </div>\r\n );\r\n\r\n \r\nexport default Cita ;","import React, { Fragment, useState} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //arreglo de citas (arreglo prioncipal)\nconst [citas, guardarCitas] = useState([]);\n\n// funcion citas actuales mas nuevas\nconst crearCita = cita =>{\nguardarCitas([...citas, cita])\n}\n\n//elimina citas\n\nconst eliminarCita = id =>{\n  const nuevasCitas = citas.filter(cita =>cita.id !== id)\n  guardarCitas(nuevasCitas);\n}\n const titulo = citas.length === 0 ? 'No hay Citas'   : 'Administra tus citas'\n  return (\n    <Fragment>\n        <h1>Administrador de Pacientes </h1>\n\n        <div className = \"container\">\n          <div className = \" row\">\n            <div className = \"one-half column\">\n              <Formulario\n              crearCita={crearCita}\n              />\n            </div>\n            <div className = \"one-half column\">\n              <h2>{titulo}</h2>\n            {citas.map(cita =>\n              <Cita\n              key ={cita.id}\n              cita ={cita}\n              eliminarCita = {eliminarCita}\n              />\n              )}\n            </div>\n          </div>\n        </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}